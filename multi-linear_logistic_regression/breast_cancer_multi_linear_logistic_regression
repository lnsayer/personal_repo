{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "cbfceb87-3870-4729-b0d8-c57d81e3bed2",
   "metadata": {},
   "source": [
    "## Breast Cancer Multi-Linear Logistic Regression"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 233,
   "id": "3373b233-3b89-45db-ace4-f5d142873ea9",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "import sklearn\n",
    "from numpy.random import default_rng\n",
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "3c36e34b-034e-4b63-8d04-e6d689cb8a61",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>mean radius</th>\n",
       "      <th>mean texture</th>\n",
       "      <th>mean perimeter</th>\n",
       "      <th>mean area</th>\n",
       "      <th>mean smoothness</th>\n",
       "      <th>mean compactness</th>\n",
       "      <th>mean concavity</th>\n",
       "      <th>mean concave points</th>\n",
       "      <th>mean symmetry</th>\n",
       "      <th>mean fractal dimension</th>\n",
       "      <th>...</th>\n",
       "      <th>worst texture</th>\n",
       "      <th>worst perimeter</th>\n",
       "      <th>worst area</th>\n",
       "      <th>worst smoothness</th>\n",
       "      <th>worst compactness</th>\n",
       "      <th>worst concavity</th>\n",
       "      <th>worst concave points</th>\n",
       "      <th>worst symmetry</th>\n",
       "      <th>worst fractal dimension</th>\n",
       "      <th>target</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>17.99</td>\n",
       "      <td>10.38</td>\n",
       "      <td>122.80</td>\n",
       "      <td>1001.0</td>\n",
       "      <td>0.11840</td>\n",
       "      <td>0.27760</td>\n",
       "      <td>0.30010</td>\n",
       "      <td>0.14710</td>\n",
       "      <td>0.2419</td>\n",
       "      <td>0.07871</td>\n",
       "      <td>...</td>\n",
       "      <td>17.33</td>\n",
       "      <td>184.60</td>\n",
       "      <td>2019.0</td>\n",
       "      <td>0.16220</td>\n",
       "      <td>0.66560</td>\n",
       "      <td>0.7119</td>\n",
       "      <td>0.2654</td>\n",
       "      <td>0.4601</td>\n",
       "      <td>0.11890</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>20.57</td>\n",
       "      <td>17.77</td>\n",
       "      <td>132.90</td>\n",
       "      <td>1326.0</td>\n",
       "      <td>0.08474</td>\n",
       "      <td>0.07864</td>\n",
       "      <td>0.08690</td>\n",
       "      <td>0.07017</td>\n",
       "      <td>0.1812</td>\n",
       "      <td>0.05667</td>\n",
       "      <td>...</td>\n",
       "      <td>23.41</td>\n",
       "      <td>158.80</td>\n",
       "      <td>1956.0</td>\n",
       "      <td>0.12380</td>\n",
       "      <td>0.18660</td>\n",
       "      <td>0.2416</td>\n",
       "      <td>0.1860</td>\n",
       "      <td>0.2750</td>\n",
       "      <td>0.08902</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>19.69</td>\n",
       "      <td>21.25</td>\n",
       "      <td>130.00</td>\n",
       "      <td>1203.0</td>\n",
       "      <td>0.10960</td>\n",
       "      <td>0.15990</td>\n",
       "      <td>0.19740</td>\n",
       "      <td>0.12790</td>\n",
       "      <td>0.2069</td>\n",
       "      <td>0.05999</td>\n",
       "      <td>...</td>\n",
       "      <td>25.53</td>\n",
       "      <td>152.50</td>\n",
       "      <td>1709.0</td>\n",
       "      <td>0.14440</td>\n",
       "      <td>0.42450</td>\n",
       "      <td>0.4504</td>\n",
       "      <td>0.2430</td>\n",
       "      <td>0.3613</td>\n",
       "      <td>0.08758</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>11.42</td>\n",
       "      <td>20.38</td>\n",
       "      <td>77.58</td>\n",
       "      <td>386.1</td>\n",
       "      <td>0.14250</td>\n",
       "      <td>0.28390</td>\n",
       "      <td>0.24140</td>\n",
       "      <td>0.10520</td>\n",
       "      <td>0.2597</td>\n",
       "      <td>0.09744</td>\n",
       "      <td>...</td>\n",
       "      <td>26.50</td>\n",
       "      <td>98.87</td>\n",
       "      <td>567.7</td>\n",
       "      <td>0.20980</td>\n",
       "      <td>0.86630</td>\n",
       "      <td>0.6869</td>\n",
       "      <td>0.2575</td>\n",
       "      <td>0.6638</td>\n",
       "      <td>0.17300</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>20.29</td>\n",
       "      <td>14.34</td>\n",
       "      <td>135.10</td>\n",
       "      <td>1297.0</td>\n",
       "      <td>0.10030</td>\n",
       "      <td>0.13280</td>\n",
       "      <td>0.19800</td>\n",
       "      <td>0.10430</td>\n",
       "      <td>0.1809</td>\n",
       "      <td>0.05883</td>\n",
       "      <td>...</td>\n",
       "      <td>16.67</td>\n",
       "      <td>152.20</td>\n",
       "      <td>1575.0</td>\n",
       "      <td>0.13740</td>\n",
       "      <td>0.20500</td>\n",
       "      <td>0.4000</td>\n",
       "      <td>0.1625</td>\n",
       "      <td>0.2364</td>\n",
       "      <td>0.07678</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>564</th>\n",
       "      <td>21.56</td>\n",
       "      <td>22.39</td>\n",
       "      <td>142.00</td>\n",
       "      <td>1479.0</td>\n",
       "      <td>0.11100</td>\n",
       "      <td>0.11590</td>\n",
       "      <td>0.24390</td>\n",
       "      <td>0.13890</td>\n",
       "      <td>0.1726</td>\n",
       "      <td>0.05623</td>\n",
       "      <td>...</td>\n",
       "      <td>26.40</td>\n",
       "      <td>166.10</td>\n",
       "      <td>2027.0</td>\n",
       "      <td>0.14100</td>\n",
       "      <td>0.21130</td>\n",
       "      <td>0.4107</td>\n",
       "      <td>0.2216</td>\n",
       "      <td>0.2060</td>\n",
       "      <td>0.07115</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>565</th>\n",
       "      <td>20.13</td>\n",
       "      <td>28.25</td>\n",
       "      <td>131.20</td>\n",
       "      <td>1261.0</td>\n",
       "      <td>0.09780</td>\n",
       "      <td>0.10340</td>\n",
       "      <td>0.14400</td>\n",
       "      <td>0.09791</td>\n",
       "      <td>0.1752</td>\n",
       "      <td>0.05533</td>\n",
       "      <td>...</td>\n",
       "      <td>38.25</td>\n",
       "      <td>155.00</td>\n",
       "      <td>1731.0</td>\n",
       "      <td>0.11660</td>\n",
       "      <td>0.19220</td>\n",
       "      <td>0.3215</td>\n",
       "      <td>0.1628</td>\n",
       "      <td>0.2572</td>\n",
       "      <td>0.06637</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>566</th>\n",
       "      <td>16.60</td>\n",
       "      <td>28.08</td>\n",
       "      <td>108.30</td>\n",
       "      <td>858.1</td>\n",
       "      <td>0.08455</td>\n",
       "      <td>0.10230</td>\n",
       "      <td>0.09251</td>\n",
       "      <td>0.05302</td>\n",
       "      <td>0.1590</td>\n",
       "      <td>0.05648</td>\n",
       "      <td>...</td>\n",
       "      <td>34.12</td>\n",
       "      <td>126.70</td>\n",
       "      <td>1124.0</td>\n",
       "      <td>0.11390</td>\n",
       "      <td>0.30940</td>\n",
       "      <td>0.3403</td>\n",
       "      <td>0.1418</td>\n",
       "      <td>0.2218</td>\n",
       "      <td>0.07820</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>567</th>\n",
       "      <td>20.60</td>\n",
       "      <td>29.33</td>\n",
       "      <td>140.10</td>\n",
       "      <td>1265.0</td>\n",
       "      <td>0.11780</td>\n",
       "      <td>0.27700</td>\n",
       "      <td>0.35140</td>\n",
       "      <td>0.15200</td>\n",
       "      <td>0.2397</td>\n",
       "      <td>0.07016</td>\n",
       "      <td>...</td>\n",
       "      <td>39.42</td>\n",
       "      <td>184.60</td>\n",
       "      <td>1821.0</td>\n",
       "      <td>0.16500</td>\n",
       "      <td>0.86810</td>\n",
       "      <td>0.9387</td>\n",
       "      <td>0.2650</td>\n",
       "      <td>0.4087</td>\n",
       "      <td>0.12400</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>568</th>\n",
       "      <td>7.76</td>\n",
       "      <td>24.54</td>\n",
       "      <td>47.92</td>\n",
       "      <td>181.0</td>\n",
       "      <td>0.05263</td>\n",
       "      <td>0.04362</td>\n",
       "      <td>0.00000</td>\n",
       "      <td>0.00000</td>\n",
       "      <td>0.1587</td>\n",
       "      <td>0.05884</td>\n",
       "      <td>...</td>\n",
       "      <td>30.37</td>\n",
       "      <td>59.16</td>\n",
       "      <td>268.6</td>\n",
       "      <td>0.08996</td>\n",
       "      <td>0.06444</td>\n",
       "      <td>0.0000</td>\n",
       "      <td>0.0000</td>\n",
       "      <td>0.2871</td>\n",
       "      <td>0.07039</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>569 rows × 31 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     mean radius  mean texture  mean perimeter  mean area  mean smoothness  \\\n",
       "0          17.99         10.38          122.80     1001.0          0.11840   \n",
       "1          20.57         17.77          132.90     1326.0          0.08474   \n",
       "2          19.69         21.25          130.00     1203.0          0.10960   \n",
       "3          11.42         20.38           77.58      386.1          0.14250   \n",
       "4          20.29         14.34          135.10     1297.0          0.10030   \n",
       "..           ...           ...             ...        ...              ...   \n",
       "564        21.56         22.39          142.00     1479.0          0.11100   \n",
       "565        20.13         28.25          131.20     1261.0          0.09780   \n",
       "566        16.60         28.08          108.30      858.1          0.08455   \n",
       "567        20.60         29.33          140.10     1265.0          0.11780   \n",
       "568         7.76         24.54           47.92      181.0          0.05263   \n",
       "\n",
       "     mean compactness  mean concavity  mean concave points  mean symmetry  \\\n",
       "0             0.27760         0.30010              0.14710         0.2419   \n",
       "1             0.07864         0.08690              0.07017         0.1812   \n",
       "2             0.15990         0.19740              0.12790         0.2069   \n",
       "3             0.28390         0.24140              0.10520         0.2597   \n",
       "4             0.13280         0.19800              0.10430         0.1809   \n",
       "..                ...             ...                  ...            ...   \n",
       "564           0.11590         0.24390              0.13890         0.1726   \n",
       "565           0.10340         0.14400              0.09791         0.1752   \n",
       "566           0.10230         0.09251              0.05302         0.1590   \n",
       "567           0.27700         0.35140              0.15200         0.2397   \n",
       "568           0.04362         0.00000              0.00000         0.1587   \n",
       "\n",
       "     mean fractal dimension  ...  worst texture  worst perimeter  worst area  \\\n",
       "0                   0.07871  ...          17.33           184.60      2019.0   \n",
       "1                   0.05667  ...          23.41           158.80      1956.0   \n",
       "2                   0.05999  ...          25.53           152.50      1709.0   \n",
       "3                   0.09744  ...          26.50            98.87       567.7   \n",
       "4                   0.05883  ...          16.67           152.20      1575.0   \n",
       "..                      ...  ...            ...              ...         ...   \n",
       "564                 0.05623  ...          26.40           166.10      2027.0   \n",
       "565                 0.05533  ...          38.25           155.00      1731.0   \n",
       "566                 0.05648  ...          34.12           126.70      1124.0   \n",
       "567                 0.07016  ...          39.42           184.60      1821.0   \n",
       "568                 0.05884  ...          30.37            59.16       268.6   \n",
       "\n",
       "     worst smoothness  worst compactness  worst concavity  \\\n",
       "0             0.16220            0.66560           0.7119   \n",
       "1             0.12380            0.18660           0.2416   \n",
       "2             0.14440            0.42450           0.4504   \n",
       "3             0.20980            0.86630           0.6869   \n",
       "4             0.13740            0.20500           0.4000   \n",
       "..                ...                ...              ...   \n",
       "564           0.14100            0.21130           0.4107   \n",
       "565           0.11660            0.19220           0.3215   \n",
       "566           0.11390            0.30940           0.3403   \n",
       "567           0.16500            0.86810           0.9387   \n",
       "568           0.08996            0.06444           0.0000   \n",
       "\n",
       "     worst concave points  worst symmetry  worst fractal dimension  target  \n",
       "0                  0.2654          0.4601                  0.11890       0  \n",
       "1                  0.1860          0.2750                  0.08902       0  \n",
       "2                  0.2430          0.3613                  0.08758       0  \n",
       "3                  0.2575          0.6638                  0.17300       0  \n",
       "4                  0.1625          0.2364                  0.07678       0  \n",
       "..                    ...             ...                      ...     ...  \n",
       "564                0.2216          0.2060                  0.07115       0  \n",
       "565                0.1628          0.2572                  0.06637       0  \n",
       "566                0.1418          0.2218                  0.07820       0  \n",
       "567                0.2650          0.4087                  0.12400       0  \n",
       "568                0.0000          0.2871                  0.07039       1  \n",
       "\n",
       "[569 rows x 31 columns]"
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Import the dataset\n",
    "from sklearn.datasets import load_breast_cancer\n",
    "data = load_breast_cancer()\n",
    "\n",
    "#Turning to dataframe to visualise\n",
    "df = pd.DataFrame(data['data'], columns=data['feature_names'])\n",
    "df['target'] = data['target']\n",
    "\n",
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "6ab8c04f-ce48-495a-bcdf-b80e967c208d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "target\n",
       "1    357\n",
       "0    212\n",
       "Name: count, dtype: int64"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['target'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "4c3f6839-d3e1-4609-bdf2-3a8467158338",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>mean radius</th>\n",
       "      <th>mean texture</th>\n",
       "      <th>mean perimeter</th>\n",
       "      <th>mean area</th>\n",
       "      <th>mean smoothness</th>\n",
       "      <th>mean compactness</th>\n",
       "      <th>mean concavity</th>\n",
       "      <th>mean concave points</th>\n",
       "      <th>mean symmetry</th>\n",
       "      <th>mean fractal dimension</th>\n",
       "      <th>...</th>\n",
       "      <th>worst texture</th>\n",
       "      <th>worst perimeter</th>\n",
       "      <th>worst area</th>\n",
       "      <th>worst smoothness</th>\n",
       "      <th>worst compactness</th>\n",
       "      <th>worst concavity</th>\n",
       "      <th>worst concave points</th>\n",
       "      <th>worst symmetry</th>\n",
       "      <th>worst fractal dimension</th>\n",
       "      <th>target</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>569.000000</td>\n",
       "      <td>569.000000</td>\n",
       "      <td>569.000000</td>\n",
       "      <td>569.000000</td>\n",
       "      <td>569.000000</td>\n",
       "      <td>569.000000</td>\n",
       "      <td>569.000000</td>\n",
       "      <td>569.000000</td>\n",
       "      <td>569.000000</td>\n",
       "      <td>569.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>569.000000</td>\n",
       "      <td>569.000000</td>\n",
       "      <td>569.000000</td>\n",
       "      <td>569.000000</td>\n",
       "      <td>569.000000</td>\n",
       "      <td>569.000000</td>\n",
       "      <td>569.000000</td>\n",
       "      <td>569.000000</td>\n",
       "      <td>569.000000</td>\n",
       "      <td>569.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>14.127292</td>\n",
       "      <td>19.289649</td>\n",
       "      <td>91.969033</td>\n",
       "      <td>654.889104</td>\n",
       "      <td>0.096360</td>\n",
       "      <td>0.104341</td>\n",
       "      <td>0.088799</td>\n",
       "      <td>0.048919</td>\n",
       "      <td>0.181162</td>\n",
       "      <td>0.062798</td>\n",
       "      <td>...</td>\n",
       "      <td>25.677223</td>\n",
       "      <td>107.261213</td>\n",
       "      <td>880.583128</td>\n",
       "      <td>0.132369</td>\n",
       "      <td>0.254265</td>\n",
       "      <td>0.272188</td>\n",
       "      <td>0.114606</td>\n",
       "      <td>0.290076</td>\n",
       "      <td>0.083946</td>\n",
       "      <td>0.627417</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>3.524049</td>\n",
       "      <td>4.301036</td>\n",
       "      <td>24.298981</td>\n",
       "      <td>351.914129</td>\n",
       "      <td>0.014064</td>\n",
       "      <td>0.052813</td>\n",
       "      <td>0.079720</td>\n",
       "      <td>0.038803</td>\n",
       "      <td>0.027414</td>\n",
       "      <td>0.007060</td>\n",
       "      <td>...</td>\n",
       "      <td>6.146258</td>\n",
       "      <td>33.602542</td>\n",
       "      <td>569.356993</td>\n",
       "      <td>0.022832</td>\n",
       "      <td>0.157336</td>\n",
       "      <td>0.208624</td>\n",
       "      <td>0.065732</td>\n",
       "      <td>0.061867</td>\n",
       "      <td>0.018061</td>\n",
       "      <td>0.483918</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>6.981000</td>\n",
       "      <td>9.710000</td>\n",
       "      <td>43.790000</td>\n",
       "      <td>143.500000</td>\n",
       "      <td>0.052630</td>\n",
       "      <td>0.019380</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.106000</td>\n",
       "      <td>0.049960</td>\n",
       "      <td>...</td>\n",
       "      <td>12.020000</td>\n",
       "      <td>50.410000</td>\n",
       "      <td>185.200000</td>\n",
       "      <td>0.071170</td>\n",
       "      <td>0.027290</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.156500</td>\n",
       "      <td>0.055040</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>11.700000</td>\n",
       "      <td>16.170000</td>\n",
       "      <td>75.170000</td>\n",
       "      <td>420.300000</td>\n",
       "      <td>0.086370</td>\n",
       "      <td>0.064920</td>\n",
       "      <td>0.029560</td>\n",
       "      <td>0.020310</td>\n",
       "      <td>0.161900</td>\n",
       "      <td>0.057700</td>\n",
       "      <td>...</td>\n",
       "      <td>21.080000</td>\n",
       "      <td>84.110000</td>\n",
       "      <td>515.300000</td>\n",
       "      <td>0.116600</td>\n",
       "      <td>0.147200</td>\n",
       "      <td>0.114500</td>\n",
       "      <td>0.064930</td>\n",
       "      <td>0.250400</td>\n",
       "      <td>0.071460</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>13.370000</td>\n",
       "      <td>18.840000</td>\n",
       "      <td>86.240000</td>\n",
       "      <td>551.100000</td>\n",
       "      <td>0.095870</td>\n",
       "      <td>0.092630</td>\n",
       "      <td>0.061540</td>\n",
       "      <td>0.033500</td>\n",
       "      <td>0.179200</td>\n",
       "      <td>0.061540</td>\n",
       "      <td>...</td>\n",
       "      <td>25.410000</td>\n",
       "      <td>97.660000</td>\n",
       "      <td>686.500000</td>\n",
       "      <td>0.131300</td>\n",
       "      <td>0.211900</td>\n",
       "      <td>0.226700</td>\n",
       "      <td>0.099930</td>\n",
       "      <td>0.282200</td>\n",
       "      <td>0.080040</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>15.780000</td>\n",
       "      <td>21.800000</td>\n",
       "      <td>104.100000</td>\n",
       "      <td>782.700000</td>\n",
       "      <td>0.105300</td>\n",
       "      <td>0.130400</td>\n",
       "      <td>0.130700</td>\n",
       "      <td>0.074000</td>\n",
       "      <td>0.195700</td>\n",
       "      <td>0.066120</td>\n",
       "      <td>...</td>\n",
       "      <td>29.720000</td>\n",
       "      <td>125.400000</td>\n",
       "      <td>1084.000000</td>\n",
       "      <td>0.146000</td>\n",
       "      <td>0.339100</td>\n",
       "      <td>0.382900</td>\n",
       "      <td>0.161400</td>\n",
       "      <td>0.317900</td>\n",
       "      <td>0.092080</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>28.110000</td>\n",
       "      <td>39.280000</td>\n",
       "      <td>188.500000</td>\n",
       "      <td>2501.000000</td>\n",
       "      <td>0.163400</td>\n",
       "      <td>0.345400</td>\n",
       "      <td>0.426800</td>\n",
       "      <td>0.201200</td>\n",
       "      <td>0.304000</td>\n",
       "      <td>0.097440</td>\n",
       "      <td>...</td>\n",
       "      <td>49.540000</td>\n",
       "      <td>251.200000</td>\n",
       "      <td>4254.000000</td>\n",
       "      <td>0.222600</td>\n",
       "      <td>1.058000</td>\n",
       "      <td>1.252000</td>\n",
       "      <td>0.291000</td>\n",
       "      <td>0.663800</td>\n",
       "      <td>0.207500</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>8 rows × 31 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "       mean radius  mean texture  mean perimeter    mean area  \\\n",
       "count   569.000000    569.000000      569.000000   569.000000   \n",
       "mean     14.127292     19.289649       91.969033   654.889104   \n",
       "std       3.524049      4.301036       24.298981   351.914129   \n",
       "min       6.981000      9.710000       43.790000   143.500000   \n",
       "25%      11.700000     16.170000       75.170000   420.300000   \n",
       "50%      13.370000     18.840000       86.240000   551.100000   \n",
       "75%      15.780000     21.800000      104.100000   782.700000   \n",
       "max      28.110000     39.280000      188.500000  2501.000000   \n",
       "\n",
       "       mean smoothness  mean compactness  mean concavity  mean concave points  \\\n",
       "count       569.000000        569.000000      569.000000           569.000000   \n",
       "mean          0.096360          0.104341        0.088799             0.048919   \n",
       "std           0.014064          0.052813        0.079720             0.038803   \n",
       "min           0.052630          0.019380        0.000000             0.000000   \n",
       "25%           0.086370          0.064920        0.029560             0.020310   \n",
       "50%           0.095870          0.092630        0.061540             0.033500   \n",
       "75%           0.105300          0.130400        0.130700             0.074000   \n",
       "max           0.163400          0.345400        0.426800             0.201200   \n",
       "\n",
       "       mean symmetry  mean fractal dimension  ...  worst texture  \\\n",
       "count     569.000000              569.000000  ...     569.000000   \n",
       "mean        0.181162                0.062798  ...      25.677223   \n",
       "std         0.027414                0.007060  ...       6.146258   \n",
       "min         0.106000                0.049960  ...      12.020000   \n",
       "25%         0.161900                0.057700  ...      21.080000   \n",
       "50%         0.179200                0.061540  ...      25.410000   \n",
       "75%         0.195700                0.066120  ...      29.720000   \n",
       "max         0.304000                0.097440  ...      49.540000   \n",
       "\n",
       "       worst perimeter   worst area  worst smoothness  worst compactness  \\\n",
       "count       569.000000   569.000000        569.000000         569.000000   \n",
       "mean        107.261213   880.583128          0.132369           0.254265   \n",
       "std          33.602542   569.356993          0.022832           0.157336   \n",
       "min          50.410000   185.200000          0.071170           0.027290   \n",
       "25%          84.110000   515.300000          0.116600           0.147200   \n",
       "50%          97.660000   686.500000          0.131300           0.211900   \n",
       "75%         125.400000  1084.000000          0.146000           0.339100   \n",
       "max         251.200000  4254.000000          0.222600           1.058000   \n",
       "\n",
       "       worst concavity  worst concave points  worst symmetry  \\\n",
       "count       569.000000            569.000000      569.000000   \n",
       "mean          0.272188              0.114606        0.290076   \n",
       "std           0.208624              0.065732        0.061867   \n",
       "min           0.000000              0.000000        0.156500   \n",
       "25%           0.114500              0.064930        0.250400   \n",
       "50%           0.226700              0.099930        0.282200   \n",
       "75%           0.382900              0.161400        0.317900   \n",
       "max           1.252000              0.291000        0.663800   \n",
       "\n",
       "       worst fractal dimension      target  \n",
       "count               569.000000  569.000000  \n",
       "mean                  0.083946    0.627417  \n",
       "std                   0.018061    0.483918  \n",
       "min                   0.055040    0.000000  \n",
       "25%                   0.071460    0.000000  \n",
       "50%                   0.080040    1.000000  \n",
       "75%                   0.092080    1.000000  \n",
       "max                   0.207500    1.000000  \n",
       "\n",
       "[8 rows x 31 columns]"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.describe()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9db25e5c-e831-4dae-9b60-77f1a4834ce7",
   "metadata": {},
   "source": [
    "## Everything from scratch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 142,
   "id": "f76d6b88-a055-460e-82f1-b2f63ccd7d0c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "569\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "array([-0.21046548, -0.20525213,  0.16639252,  2.92860186, -0.28062286,\n",
       "       -0.28082092, -0.28092074, -0.28089999, -0.2802028 , -0.28073692,\n",
       "       -0.2794652 , -0.27659062, -0.27155828, -0.14148507, -0.28096631,\n",
       "       -0.28096153, -0.28096489, -0.28096006, -0.28091847, -0.28098627,\n",
       "       -0.2015352 , -0.17599941,  0.21958805,  3.77770295, -0.28050256,\n",
       "       -0.28064849, -0.28076149, -0.28070999, -0.27976931, -0.28071568,\n",
       "        1.        ])"
      ]
     },
     "execution_count": 142,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x = data['data']\n",
    "y = data['target']\n",
    "x.shape, y.shape\n",
    "\n",
    "def split_dataset(x, y, test_set_proportion, random_generator = default_rng()):\n",
    "    # Randomly split up the data into training and test sets\n",
    "    rng = random_generator\n",
    "    dataset_len = len(x)\n",
    "    \n",
    "    n_test = int(test_set_proportion*dataset_len)\n",
    "    n_train = dataset_len - n_test\n",
    "    \n",
    "    indices = rng.permutation(dataset_len)\n",
    "\n",
    "    x_train = x[indices[:n_train]]\n",
    "    x_test = x[indices[n_train:]]\n",
    "\n",
    "    y_train = y[indices[:n_train]]\n",
    "    y_test = y[indices[n_train:]]\n",
    "\n",
    "    # Check that the indices are in fact collecting all the data \n",
    "    print(len(set(np.concatenate((indices[:n_train],indices[n_train:])))))\n",
    "\n",
    "    # Perform standardisation\n",
    "    x_train_mean, x_train_std = np.mean(x_train), np.std(x_train)\n",
    "    x_test_mean, x_test_std = np.mean(x_test), np.std(x_test)\n",
    "\n",
    "    x_train = (x_train - x_train_mean)/x_train_std\n",
    "    x_test = (x_test - x_test_mean)/x_test_std\n",
    "    \n",
    "    # Include 1 for bias term \n",
    "    x_train = np.c_[x_train, np.ones(456)]\n",
    "    x_test = np.c_[x_test, np.ones(113)]\n",
    "          \n",
    "    return x_train, y_train, x_test, y_test\n",
    "\n",
    "\n",
    "x_train, y_train, x_test, y_test = split_dataset(x, y, 0.2)\n",
    "x_test[0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 253,
   "id": "479eb08b-ee54-45dc-bdb4-fe86f072a951",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.0066928509242848554\n",
      "(456,)\n"
     ]
    }
   ],
   "source": [
    "def sigmoid(x):\n",
    "    return 1/(1+np.exp(-x))\n",
    "\n",
    "def accuracyfunc(y_pred, y_true):\n",
    "    correct = np.sum(y_pred == y_true)\n",
    "    return correct/len(y_pred)\n",
    "\n",
    "\n",
    "print(sigmoid(-5))\n",
    "\n",
    "# Create Logistic Regression Class\n",
    "class Logisticregressor:\n",
    "    def __init__(self, x, y, random_generator):\n",
    "        rng = random_generator\n",
    "        self.w  = rng.random((31))\n",
    "        self.w[-1] = 0\n",
    "        \n",
    "    \n",
    "    def forward(self, x):\n",
    "        yhat = np.matmul(x, self.w)\n",
    "        log_yhat = sigmoid(yhat)\n",
    "\n",
    "        return log_yhat\n",
    "\n",
    "    def loss(self, x, y):\n",
    "        yhat = model.forward(x)\n",
    "        loss = y*np.log(yhat) + (1-y)*np.log(1-yhat)\n",
    "        \n",
    "        return -loss\n",
    "    \n",
    "    def gradient(self, x, y):\n",
    "        yhat = model.forward(x)\n",
    "        diff = yhat - y \n",
    "        # print(x.shape, diff.shape)\n",
    "        \n",
    "        gradient = np.matmul(diff, x)\n",
    "        \n",
    "        return gradient\n",
    "        \n",
    "    def gradient_descent(self, x, y):\n",
    "        grad = model.gradient(x, y)\n",
    "        self.w = self.w - lr * grad\n",
    "        \n",
    "model = Logisticregressor(x_train, y_train, np.random.default_rng())\n",
    "\n",
    "# print(model.forward(x_train))\n",
    "print(model.loss(x_train, y_train).shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 279,
   "id": "7f5bbb13-2de5-4ed9-a900-bbf5c6853e56",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch: 0 | Loss: 201.6543679830297 | Accuracy: 0.11504424778761062\n",
      "Epoch: 100 | Loss: 22.49944267987283 | Accuracy: 0.9292035398230089\n",
      "Epoch: 200 | Loss: 21.335136512062668 | Accuracy: 0.9469026548672567\n",
      "Epoch: 300 | Loss: 20.56453258025501 | Accuracy: 0.9469026548672567\n",
      "Epoch: 400 | Loss: 20.029539195200016 | Accuracy: 0.9380530973451328\n",
      "Epoch: 500 | Loss: 19.641804866403415 | Accuracy: 0.9380530973451328\n",
      "Epoch: 600 | Loss: 19.34981123363763 | Accuracy: 0.9380530973451328\n",
      "Epoch: 700 | Loss: 19.122292552448588 | Accuracy: 0.9380530973451328\n",
      "Epoch: 800 | Loss: 18.93953813531843 | Accuracy: 0.9380530973451328\n",
      "Epoch: 900 | Loss: 18.788684048662223 | Accuracy: 0.9469026548672567\n"
     ]
    }
   ],
   "source": [
    "# Training Run \n",
    "model = Logisticregressor(x, y, np.random.default_rng())\n",
    "epochs = 1000\n",
    "lr = 0.01\n",
    "loss = np.zeros(epochs)\n",
    "accuracy_array = np.zeros(epochs)\n",
    "\n",
    "x = x_test\n",
    "y = y_test\n",
    "\n",
    "for epoch in range (epochs):\n",
    "    error = np.sum(model.loss(x, y))\n",
    "    loss[epoch] = error\n",
    "    predictions = np.round(model.forward(x))\n",
    "    # print(predictions)\n",
    "\n",
    "    accuracy = accuracyfunc(predictions, y)\n",
    "    accuracy_array[epoch] = accuracy\n",
    "    \n",
    "    model.gradient_descent(x, y)\n",
    "    if epoch % 100 == 0:   \n",
    "        print(f\"Epoch: {epoch} | Loss: {error} | Accuracy: {accuracy}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 280,
   "id": "c80f362c-248c-4193-b54f-349e4ea56e34",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAigAAAGdCAYAAAA44ojeAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjguMCwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy81sbWrAAAACXBIWXMAAA9hAAAPYQGoP6dpAAAqS0lEQVR4nO3df3RU9Z3/8dckkwwhJlMCknEksnGbrdaAtaGLUiu0QCgFqcuexQql9JTz/WoRlhRYLGXPKe1pE5b9FtguW/arhyOulKbfPZWuu7UuYbWxHPyBUVrAttpjlFATU2mcJBJn8uPz/SPJzcxNIpnJzNyb5Pk4Z9aZz33fO5/7oWfzOp/7uXc8xhgjAAAAF8lwugMAAAB2BBQAAOA6BBQAAOA6BBQAAOA6BBQAAOA6BBQAAOA6BBQAAOA6BBQAAOA6Xqc7kIienh699dZbysvLk8fjcbo7AABgBIwxamtrUzAYVEbGB8+RjMmA8tZbb6moqMjpbgAAgAQ0NDRoxowZH1gzJgNKXl6epN4TzM/Pd7g3AABgJFpbW1VUVGT9Hf8gYzKg9F/Wyc/PJ6AAADDGjGR5BotkAQCA6xBQAACA6xBQAACA6xBQAACA6xBQAACA6xBQAACA6xBQAACA6xBQAACA6xBQAACA6xBQAACA6xBQAACA6xBQAACA6xBQbIwxeuTUG3r5QovTXQEAYMIak79mnEpPnG3SNx8/L0l6Y/cyh3sDAMDExAyKzWvNbU53AQCACY+AAgAAXIeAAgAAXIeAYuORx+kuAAAw4RFQbIyM010AAGDCI6AAAADXIaDYcIkHAADnEVAAAIDrEFAAAIDrEFAAAIDrEFBsPCxBAQDAcQQUAADgOgQUAADgOgQUAADgOgQUG5agAADgPAKKDQ+6BwDAeQQUAADgOnEFlF27dsnj8cS8AoGAtd0Yo127dikYDConJ0cLFizQ+fPnY44RDoe1adMmTZs2Tbm5uVqxYoUuXryYnLNJAi7xAADgvLhnUG666SY1NjZar7Nnz1rb9uzZo7179+rAgQM6ffq0AoGAFi9erLa2NqumoqJCx44dU3V1tU6ePKn29nYtX75c3d3dyTkjAAAw5nnj3sHrjZk16WeM0f79+7Vz506tXLlSkvTII4+osLBQR48e1b333qtQKKRDhw7p0Ucf1aJFiyRJR44cUVFRkU6cOKElS5aM8nQAAMB4EPcMymuvvaZgMKji4mJ94Qtf0Ouvvy5Jqq+vV1NTk8rLy61an8+n+fPn69SpU5Kkuro6dXZ2xtQEg0GVlpZaNUMJh8NqbW2NeQEAgPErroAyd+5c/du//Zv++7//Ww899JCampo0b948Xbp0SU1NTZKkwsLCmH0KCwutbU1NTcrOztaUKVOGrRlKVVWV/H6/9SoqKoqn23HhUfcAADgvroCydOlS/fVf/7VmzZqlRYsW6Wc/+5mk3ks5/Ty2v/DGmEFtdleq2bFjh0KhkPVqaGiIp9sAAGCMGdVtxrm5uZo1a5Zee+01a12KfSakubnZmlUJBAKKRCJqaWkZtmYoPp9P+fn5MS8AADB+jSqghMNh/eY3v9E111yj4uJiBQIB1dTUWNsjkYhqa2s1b948SVJZWZmysrJiahobG3Xu3DmrBgAAIK67eLZt26Y777xT1113nZqbm/Wd73xHra2tWrdunTwejyoqKlRZWamSkhKVlJSosrJSkydP1urVqyVJfr9f69ev19atWzV16lQVFBRo27Zt1iUjAAAAKc6AcvHiRd1zzz165513dPXVV+vWW2/Vc889p5kzZ0qStm/fro6ODm3YsEEtLS2aO3eujh8/rry8POsY+/btk9fr1apVq9TR0aGFCxfq8OHDyszMTO6ZJcGT55r02dLBt1QDAIDU8hhjxtzPz7S2tsrv9ysUCiV9PcqBp17T/zn+qvX5jd3Lknp8AAAmqnj+fvNbPDZXuuMIAACkHgEFAAC4DgEFAAC4DgEFAAC4DgEFAAC4DgEFAAC4DgEFAAC4DgEFAAC4DgEFAAC4DgEFAAC4DgEFAAC4DgHFhifdAwDgPAIKAABwHQIKAABwHQIKAABwHQIKAABwHQIKAABwHQIKAABwHQKKjUfcZwwAgNMIKAAAwHUIKAAAwHUIKAAAwHUIKAAAwHUIKAAAwHUIKDb8WCAAAM4joAAAANchoAAAANchoAAAANchoAAAANchoNjY18heuHTZkX4AADCREVCuYNk//9LpLgAAMOEQUK6g7f0up7sAAMCEQ0ABAACuQ0ABAACuQ0ABAACuQ0Cx4VH3AAA4j4ACAABch4ACAABch4ACAABch4ACAABch4ACAABch4ACAABch4Bi4xn0c4EAACDdCCgAAMB1CCgAAMB1CCgAAMB1CCg2POoeAADnEVBsjHG6BwAAgIACAABch4BiwyUeAACcR0ABAACuQ0ABAACuQ0ABAACuQ0ABAACuM6qAUlVVJY/Ho4qKCqvNGKNdu3YpGAwqJydHCxYs0Pnz52P2C4fD2rRpk6ZNm6bc3FytWLFCFy9eHE1XAADAOJJwQDl9+rQefPBBzZ49O6Z9z5492rt3rw4cOKDTp08rEAho8eLFamtrs2oqKip07NgxVVdX6+TJk2pvb9fy5cvV3d2d+JkAAIBxI6GA0t7erjVr1uihhx7SlClTrHZjjPbv36+dO3dq5cqVKi0t1SOPPKLLly/r6NGjkqRQKKRDhw7pe9/7nhYtWqRbbrlFR44c0dmzZ3XixInknBUAABjTEgoo999/v5YtW6ZFixbFtNfX16upqUnl5eVWm8/n0/z583Xq1ClJUl1dnTo7O2NqgsGgSktLrRq7cDis1tbWmBcAABi/vPHuUF1drZdeekmnT58etK2pqUmSVFhYGNNeWFioN99806rJzs6OmXnpr+nf366qqkrf+ta34u0qAAAYo+KaQWloaNDmzZt15MgRTZo0adg6j+1xrMaYQW12H1SzY8cOhUIh69XQ0BBPtwEAwBgTV0Cpq6tTc3OzysrK5PV65fV6VVtbq+9///vyer3WzIl9JqS5udnaFggEFIlE1NLSMmyNnc/nU35+fswLAACMX3EFlIULF+rs2bM6c+aM9ZozZ47WrFmjM2fO6Prrr1cgEFBNTY21TyQSUW1trebNmydJKisrU1ZWVkxNY2Ojzp07Z9UAAICJLa41KHl5eSotLY1py83N1dSpU632iooKVVZWqqSkRCUlJaqsrNTkyZO1evVqSZLf79f69eu1detWTZ06VQUFBdq2bZtmzZo1aNEtAACYmOJeJHsl27dvV0dHhzZs2KCWlhbNnTtXx48fV15enlWzb98+eb1erVq1Sh0dHVq4cKEOHz6szMzMZHcHAACMQR5jjHG6E/FqbW2V3+9XKBRK+nqUh555Xd994jcxbT/6X7fqtj+fmtTvAQBgoonn7ze/xTMC9zz0nNNdAABgQiGg2BiNuQklAADGHQKKzdi74AUAwPhDQAEAAK5DQLFhAgUAAOcRUAAAgOsQUGxYgwIAgPMIKAAAwHUIKDbcZgwAgPMIKAAAwHUIKDasQQEAwHkEFAAA4DoEFAAA4DoEFJsx+OPOAACMOwQUAADgOgQUGyZQAABwHgEFAAC4DgHFhgkUAACcR0ABAACuQ0CxYQ0KAADOI6AAAADXIaDY8GOBAAA4j4BiwyUeAACcR0ABAACuQ0CxYQIFAADnEVAAAIDrEFDsWIQCAIDjCCgAAMB1CCg2zJ8AAOA8AgoAAHAdAooNS1AAAHAeAcWGJ8kCAOA8AgoAAHAdAooNl3gAAHAeAQUAALgOAcWGCRQAAJxHQAEAAK5DQLEZbg3KuT+E0tsRAAAmMALKCG344UtOdwEAgAmDgGIz3HNQ3u/sTnNPAACYuAgoAADAdQgodsOsQeHuHgAA0oeAYkMQAQDAeQSUEeIJswAApA8BxcaQRAAAcBwBBQAAuA4BxWb4CRRmVgAASBcCCgAAcB0Cig3zJAAAOI+AMkKsnQUAIH0IKDYEEQAAnEdAsRnut3gAAED6EFBGiNgCAED6EFBsuMQDAIDz4gooBw8e1OzZs5Wfn6/8/Hzddttt+vnPf25tN8Zo165dCgaDysnJ0YIFC3T+/PmYY4TDYW3atEnTpk1Tbm6uVqxYoYsXLybnbFKIJ8wCAJA+cQWUGTNmaPfu3XrxxRf14osv6jOf+Yw+//nPWyFkz5492rt3rw4cOKDTp08rEAho8eLFamtrs45RUVGhY8eOqbq6WidPnlR7e7uWL1+u7u7u5J4ZAAAYszxmlFMDBQUF+sd//Ed95StfUTAYVEVFhR544AFJvbMlhYWF+od/+Afde++9CoVCuvrqq/Xoo4/q7rvvliS99dZbKioq0hNPPKElS5aM6DtbW1vl9/sVCoWUn58/mu4Psuvx8zp86o0ht90QyNP/vuN6rfz4jKR+JwAAE0E8f78TXoPS3d2t6upqvffee7rttttUX1+vpqYmlZeXWzU+n0/z58/XqVOnJEl1dXXq7OyMqQkGgyotLbVqhhIOh9Xa2hrzSpUPymu/bWrTlv/3q5R9NwAA6BV3QDl79qyuuuoq+Xw+3XfffTp27Jg++tGPqqmpSZJUWFgYU19YWGhta2pqUnZ2tqZMmTJszVCqqqrk9/utV1FRUbzdBgAAY0jcAeUjH/mIzpw5o+eee05f/epXtW7dOr3yyivWdo/HE1NvjBnUZnelmh07digUClmvhoaGeLs9YiyFBQDAeXEHlOzsbH34wx/WnDlzVFVVpZtvvln/9E//pEAgIEmDZkKam5utWZVAIKBIJKKWlpZha4bi8/msO4f6XwAAYPwa9XNQjDEKh8MqLi5WIBBQTU2NtS0Siai2tlbz5s2TJJWVlSkrKyumprGxUefOnbNqnMbdxAAAOM8bT/E3vvENLV26VEVFRWpra1N1dbV+8Ytf6Mknn5TH41FFRYUqKytVUlKikpISVVZWavLkyVq9erUkye/3a/369dq6daumTp2qgoICbdu2TbNmzdKiRYtScoLx4lH3AAA4L66A8vbbb2vt2rVqbGyU3+/X7Nmz9eSTT2rx4sWSpO3bt6ujo0MbNmxQS0uL5s6dq+PHjysvL886xr59++T1erVq1Sp1dHRo4cKFOnz4sDIzM5N7ZgAAYMwa9XNQnJDK56DsPHZWP3z+wgfWvLF7WVK/EwCAiSAtz0EBAABIFQKKzZibTgIAYBwioAAAANchoNiMvRU5AACMPwQUAADgOgSUQZhCAQDAaQQUGy7xAADgPAIKAABwHQKKDTMoAAA4j4ACAABch4Bi0/9jgXfeHHS4JwAATFwElGHcEMi7chEAAEgJAooNa1AAAHAeAWUYHo90/Gt36Kf3f9LprgAAMOEQUGz6J1A88ugvCvP0saIPaeEN0x3tEwAAEw0BZQR2fO5Gp7sAAMCEQkCx6V+D4vEMtGV4hq4FAACpQUCxMUP8Fk+Gh4QCAEA6EVCGER1JCCgAAKQXAcVuiNuMyScAAKQXAWUYMWtQWIQCAEBaEVBshnpOG/kEAID0IqAMwxO1CoU1KAAApBcBxcYM8ax78gkAAOlFQBlG7HNQSCgAAKQTAcVm6DUoBBQAANKJgGIz1K8Zs0gWAID0IqAMwxM1a+JhBgUAgLQioNhwmzEAAM4joAyDR90DAOAcAorNULcZE1AAAEgvAsowojMJ+QQAgPQioNiM5Dbj+nfeS09nAACYoAgow4hdgxK7bcWBk2ntCwAAEw0BxW7I56DEJpS297vS1BkAACYmAsowYp+D4mBHAACYgAgoNqZvCiV2kSwJBQCAdCKg2Az1qHsAAJBeBJRhMGcCAIBzCCg2zKAAAOA8AspwWHcCAIBjCCg2ZshHtQEAgHQioAyD+RMAAJxDQLFhDQoAAM4joAyDJSgAADiHgGLDBAoAAM4joNj0X+LxsAoFAADHEFCGwSUeAACcQ0AZhIs8AAA4jYAyDCZQAABwDgHFhtuMAQBwHgFlGKxBAQDAOQQUm86e3imUDBIKAACOIaDYtLwXkSRNmZztcE8AAJi4CCg2f+oLKFOvIqAAAOCUuAJKVVWVPvGJTygvL0/Tp0/XXXfdpd/97ncxNcYY7dq1S8FgUDk5OVqwYIHOnz8fUxMOh7Vp0yZNmzZNubm5WrFihS5evDj6sxklY4zeaQ9Lkqbm+hzuDQAAE1dcAaW2tlb333+/nnvuOdXU1Kirq0vl5eV67733rJo9e/Zo7969OnDggE6fPq1AIKDFixerra3NqqmoqNCxY8dUXV2tkydPqr29XcuXL1d3d3fyziwBlyPdCnf1SGIGBQAAJ3njKX7yySdjPj/88MOaPn266urqdMcdd8gYo/3792vnzp1auXKlJOmRRx5RYWGhjh49qnvvvVehUEiHDh3So48+qkWLFkmSjhw5oqKiIp04cUJLlixJ0qnF71J77+WdSVkZmpyd6Vg/AACY6Ea1BiUUCkmSCgoKJEn19fVqampSeXm5VePz+TR//nydOnVKklRXV6fOzs6YmmAwqNLSUqvGLhwOq7W1NeaVCpHuHt14Tb4+EsiXx3YXz4kt81PynQAAYLC4ZlCiGWO0ZcsW3X777SotLZUkNTU1SZIKCwtjagsLC/Xmm29aNdnZ2ZoyZcqgmv797aqqqvStb30r0a6O2IenX6Wfb/7UkNv8OVkp/34AANAr4RmUjRs36te//rV+9KMfDdpmn30wxgxqs/ugmh07digUClmvhoaGRLudMB6LAgBA+iQUUDZt2qTHH39cTz/9tGbMmGG1BwIBSRo0E9Lc3GzNqgQCAUUiEbW0tAxbY+fz+ZSfnx/zSjfyCQAA6RNXQDHGaOPGjXrsscf01FNPqbi4OGZ7cXGxAoGAampqrLZIJKLa2lrNmzdPklRWVqasrKyYmsbGRp07d86qcaMrzQABAIDkiWsNyv3336+jR4/qP/7jP5SXl2fNlPj9fuXk5Mjj8aiiokKVlZUqKSlRSUmJKisrNXnyZK1evdqqXb9+vbZu3aqpU6eqoKBA27Zt06xZs6y7etyIeAIAQPrEFVAOHjwoSVqwYEFM+8MPP6wvf/nLkqTt27ero6NDGzZsUEtLi+bOnavjx48rLy/Pqt+3b5+8Xq9WrVqljo4OLVy4UIcPH1Zmpntv7WUCBQCA9PEYY4zTnYhXa2ur/H6/QqFQ2tajhC536uZvH7c+v7F7WVq+FwCA8SKev9/8Fs9IMYMCAEDaEFBGiEs8AACkDwFlhDJIKAAApA0BZYSIJwAApA8BZYSYQAEAIH0IKCPksc2hHH3+gkM9AQBg/COgjJB9BuUbx8460xEAACYAAgoAAHAdAsoIsQYFAID0IaCMkH0NCgAASB0CyggxgwIAQPoQUEaIfAIAQPoQUEaIJ8kCAJA+BJQRsucT8goAAKlDQBkhjy2RkE8AAEgdAkqC7IEFAAAkDwElQcQTAABSh4CSICZQAABIHQJKgnhwGwAAqUNASRT5BACAlCGgJIh8AgBA6hBQEsQaFAAAUoeAkiDWoAAAkDoElAQxgwIAQOoQUBJEPgEAIHUIKAniSbIAAKQOASVBxBMAAFKHgJIg43QHAAAYxwgoCTKGiAIAQKoQUAAAgOsQUBLE/AkAAKlDQInDwhumW++5wgMAQOoQUOLwz6tvsd4b5lAAAEgZAgoAAHAdAkocon9/JyuDoQMAIFX4KxuHnOxM3f7haZKkgquyHe4NAADjFwElTlvL/0KSdKk94nBPAAAYvwgoccrM6L3M0x7uUu2rf3S4NwAAjE8ElDhlRP1I4PeO/87BngAAMH4RUOLUP4MiSZOzMx3sCQAA4xcBJU7RAeUqn9fBngAAMH4RUOIUfYknl4ACAEBKEFBGgRkUAABSg4ASp/Zwl/WeNSgAAKQGASVOHynMs9539zjYEQAAxjECSpxysjP1vz5VLEnqJKEAAJASBJQE5E/KkiR19RBQAABIBQJKAryZvcMW6TIO9wQAgPGJgJKArMzeW42ZQQEAIDUIKAnI9vYOG2tQAABIDQJKArwZXOIBACCVCCgJ4BIPAACpRUBJAJd4AABILQJKAvov8XR2c4kHAIBUiDugPPPMM7rzzjsVDAbl8Xj005/+NGa7MUa7du1SMBhUTk6OFixYoPPnz8fUhMNhbdq0SdOmTVNubq5WrFihixcvjupE0qn/Eg8zKAAApEbcAeW9997TzTffrAMHDgy5fc+ePdq7d68OHDig06dPKxAIaPHixWpra7NqKioqdOzYMVVXV+vkyZNqb2/X8uXL1d3dnfiZpFFWJpd4AABIpbh/jnfp0qVaunTpkNuMMdq/f7927typlStXSpIeeeQRFRYW6ujRo7r33nsVCoV06NAhPfroo1q0aJEk6ciRIyoqKtKJEye0ZMmSUZxOevQHlC4u8QAAkBJJXYNSX1+vpqYmlZeXW20+n0/z58/XqVOnJEl1dXXq7OyMqQkGgyotLbVq7MLhsFpbW2NeTuq/xBNhBgUAgJRIakBpamqSJBUWFsa0FxYWWtuampqUnZ2tKVOmDFtjV1VVJb/fb72KioqS2e249d/FE+4koAAAkAopuYvH4/HEfDbGDGqz+6CaHTt2KBQKWa+Ghoak9TURUyZnS5JaLkcc7QcAAONVUgNKIBCQpEEzIc3NzdasSiAQUCQSUUtLy7A1dj6fT/n5+TEvJxVc1RtQLke69X7n2FjYCwDAWJLUgFJcXKxAIKCamhqrLRKJqLa2VvPmzZMklZWVKSsrK6amsbFR586ds2rcLs/ntdahXHqPWRQAAJIt7rt42tvb9fvf/976XF9frzNnzqigoEDXXXedKioqVFlZqZKSEpWUlKiyslKTJ0/W6tWrJUl+v1/r16/X1q1bNXXqVBUUFGjbtm2aNWuWdVeP23k8HhXkZuvt1rD+1B7RtR/KcbpLAACMK3EHlBdffFGf/vSnrc9btmyRJK1bt06HDx/W9u3b1dHRoQ0bNqilpUVz587V8ePHlZeXZ+2zb98+eb1erVq1Sh0dHVq4cKEOHz6szMzMJJxSehTk+vR2a1iX3gs73RUAAMYdjzFmzD3Mo7W1VX6/X6FQyLH1KHf/32f1fP2fdGD1LVo+O+hIHwAAGEvi+fvNb/EkaHJ272zP5QiLZAEASDYCSoImZ/deHesgoAAAkHQElARNyuqdQengNmMAAJKOgJIgLvEAAJA6BJQE9QeUjkiXwz0BAGD8IaAkiEs8AACkDgElQVziAQAgdQgoCRq4xENAAQAg2QgoCeq/xMMMCgAAyUdASZD1HBTWoAAAkHQElARxiQcAgNQhoCRo4BIPtxkDAJBsBJQE9c+gvN/Z43BPAAAYfwgoCRq4zZgZFAAAko2AkiDu4gEAIHUIKAnqn0EJd/Wop8c43BsAAMYXAkqC+m8zlrjVGACAZCOgJMjnHRg6LvMAAJBcBJQEZWR4lJPFs1AAAEgFAsooWA9r4xIPAABJRUAZhcm+3oDSHu50uCcAAIwvBJRRmJ43SZL0dmvY4Z4AADC+EFBG4Rp/b0B5690Oh3sCAMD4QkAZhWs/lCNJeuvd9x3uCQAA4wsBZRQC/v5LPAQUAACSiYAyClf5eh/W9h6/xwMAQFIRUEYhJ5vnoAAAkAoElFHof1Db+zwHBQCApCKgjEL/DAqPugcAILkIKKNgPeqeGRQAAJKKgDIK/b9ozBoUAACSi4AyCsygAACQGgSUUZiU3Tt8HZ3dMsY43BsAAMYPAsoo9F/iMUYKd/U43BsAAMYPAsooTPIODB/rUAAASB4Cyih4MzPk6wspf2znF40BAEgWAsoo3Xr9VEnSk+eaHO4JAADjBwFllOb9eW9Aef2P7Q73BACA8YOAMkoDv2jMJR4AAJKFgDJK0/P6Akrb+w73BACA8YOAMkqF+T5J0puXLqu7h2ehAACQDASUUQp+KEe52Znq7jH6zs9eIaQAAJAEHjMGH4Ha2toqv9+vUCik/Px8p7ujH71wQTseOytJ8udk6doP5SjXlymfN1M+b4ayvb23I/u8mcr2ZigrM0NZmZ6+/2Yoy+tRdmaGvBkeZfVtz84coi6zd3v/Nm+mJ7aub5s3w6PMDI88Ho/DIwMAwIB4/n5709Snce3uOUW62HJZR567oFBHp0IdnU53SR6PrKDjzfTImzEQXLyZff/N6GuP+pyZ0RuIoj97MzKs/XrbMqJqYz97MzzKzPQoK2of+3dleHrb+v+bmaGB9x6PMqxtGqI2en8N2d57DFlt0fWENgAYG5hBSaJIV49ea25Tc1tY4c5uhbt6FO7sUbir731XjyJdPers7n+ZmPeR7h519m3v6jFRtb11ke4edUXt07vdWPW4sgyPBoUZT19bbPiJDj6xQcnT97k/8GRYn6O2ZUgexdb2bo+qz+jd36Mr12R4eo838J19NRlDfIdGUGMds3979HkM7N97rL5X3/l4otv72/q+M+Z9X01GX+NQ7R6pb9vAvhkZAzWKbreO71F/zrSOE09frHMaQV+iji1rHK7QF9t3EoqBAcygOCTbm6Gbgn7d5MB3G2NiAk+kL9h0dQ8Enq5uo+4e0/e+x3of3Rb9ubtnYL/oz93dRp22zwP79cR8T3dPb59iv6tHPT1St+n93NP33+j3xkRt7zF972Vt7+mvNSbmWFfSY6SebiOJQIf0iQ5LkqIC2ED4GardE9PukRV1Bnaxwlh0nf1YGnSsvu+N6psUG6b6g+lwfel/r2H6aP+OgePaaob5Dg061jD7R3VguO8e6juGPtbQ7RpyrAYH1KH7Yj9W1DnKNpZRb+xjFx1zPcPV2A4S1762/kjS1Xk+3f/pD8spBJRxwuPxKNvrUbZ3Yq97HggzvQGmxygm5MRs7w88Q7THHKNnIAj1HtPIqDcUDrT1fTZRNUYyGqgxZqC293P0+yvX9H+HMfbvHHycgfcfVNP7X0XtE30e3T0D5ynJOp/ovhpJsrdbtb1vjKLq+9r7jxl9HNNXq0HHidp3iPaevp3sx+npMVH9i2ofQd+TLXo8htia/C8EkuDPr84loADJkpHhUYY8ysp0uicY66LDoD0USUOHKytEDdMuKSYERR/PHgYH+vEBdTG19pohvsN2LA1XF+932MKd6U+FIz1f6//EBtJRn2/UvtHnb70fYV+G+w4TdWAz8HaYf+sB9pUVMeM2xD4x/162Gvsx49k3uv9D7TMlN1tOIqAAwBD6L51kxEyQA0iXiX09AAAAuBIBBQAAuA4BBQAAuA4BBQAAuA4BBQAAuA4BBQAAuI6jAeUHP/iBiouLNWnSJJWVlemXv/ylk90BAAAu4VhA+fGPf6yKigrt3LlTL7/8sj71qU9p6dKlunDhglNdAgAALuHYjwXOnTtXH//4x3Xw4EGr7cYbb9Rdd92lqqqqD9zXrT8WCAAAhhfP329HZlAikYjq6upUXl4e015eXq5Tp04Nqg+Hw2ptbY15AQCA8cuRgPLOO++ou7tbhYWFMe2FhYVqamoaVF9VVSW/32+9ioqK0tVVAADgAEcXyUb/rLPU+2NH9jZJ2rFjh0KhkPVqaGhIVxcBAIADHPmxwGnTpikzM3PQbElzc/OgWRVJ8vl88vl86eoeAABwmCMBJTs7W2VlZaqpqdFf/dVfWe01NTX6/Oc/f8X9+9f1shYFAICxo//v9kjuz3EkoEjSli1btHbtWs2ZM0e33XabHnzwQV24cEH33XffFfdta2uTJNaiAAAwBrW1tcnv939gjWMB5e6779alS5f07W9/W42NjSotLdUTTzyhmTNnXnHfYDCohoYG5eXlDblmZTRaW1tVVFSkhoYGbmFOIcY5PRjn9GGs04NxTo9UjbMxRm1tbQoGg1esdew5KG7FM1bSg3FOD8Y5fRjr9GCc08MN48xv8QAAANchoAAAANchoNj4fD5985vf5LbmFGOc04NxTh/GOj0Y5/RwwzizBgUAALgOMygAAMB1CCgAAMB1CCgAAMB1CCgAAMB1CChRfvCDH6i4uFiTJk1SWVmZfvnLXzrdpTGlqqpKn/jEJ5SXl6fp06frrrvu0u9+97uYGmOMdu3apWAwqJycHC1YsEDnz5+PqQmHw9q0aZOmTZum3NxcrVixQhcvXkznqYwpVVVV8ng8qqiosNoY5+T4wx/+oC9+8YuaOnWqJk+erI997GOqq6uztjPOydHV1aW///u/V3FxsXJycnT99dfr29/+tnp6eqwaxjp+zzzzjO68804Fg0F5PB799Kc/jdmerDFtaWnR2rVr5ff75ff7tXbtWr377rujPwEDY4wx1dXVJisryzz00EPmlVdeMZs3bza5ubnmzTffdLprY8aSJUvMww8/bM6dO2fOnDljli1bZq677jrT3t5u1ezevdvk5eWZn/zkJ+bs2bPm7rvvNtdcc41pbW21au677z5z7bXXmpqaGvPSSy+ZT3/60+bmm282XV1dTpyWq73wwgvmz/7sz8zs2bPN5s2brXbGefT+9Kc/mZkzZ5ovf/nL5vnnnzf19fXmxIkT5ve//71Vwzgnx3e+8x0zdepU81//9V+mvr7e/Pu//7u56qqrzP79+60axjp+TzzxhNm5c6f5yU9+YiSZY8eOxWxP1ph+9rOfNaWlpebUqVPm1KlTprS01CxfvnzU/Seg9PnLv/xLc99998W03XDDDebrX/+6Qz0a+5qbm40kU1tba4wxpqenxwQCAbN7926r5v333zd+v9/867/+qzHGmHfffddkZWWZ6upqq+YPf/iDycjIME8++WR6T8Dl2traTElJiampqTHz58+3AgrjnBwPPPCAuf3224fdzjgnz7Jly8xXvvKVmLaVK1eaL37xi8YYxjoZ7AElWWP6yiuvGEnmueees2qeffZZI8n89re/HVWfucQjKRKJqK6uTuXl5THt5eXlOnXqlEO9GvtCoZAkqaCgQJJUX1+vpqammHH2+XyaP3++Nc51dXXq7OyMqQkGgyotLeXfwub+++/XsmXLtGjRoph2xjk5Hn/8cc2ZM0d/8zd/o+nTp+uWW27RQw89ZG1nnJPn9ttv1//8z//o1VdflST96le/0smTJ/W5z31OEmOdCska02effVZ+v19z5861am699Vb5/f5Rj7tjv2bsJu+88466u7tVWFgY015YWKimpiaHejW2GWO0ZcsW3X777SotLZUkayyHGuc333zTqsnOztaUKVMG1fBvMaC6ulovvfSSTp8+PWgb45wcr7/+ug4ePKgtW7boG9/4hl544QX97d/+rXw+n770pS8xzkn0wAMPKBQK6YYbblBmZqa6u7v13e9+V/fcc48k/jedCska06amJk2fPn3Q8adPnz7qcSegRPF4PDGfjTGD2jAyGzdu1K9//WudPHly0LZExpl/iwENDQ3avHmzjh8/rkmTJg1bxziPTk9Pj+bMmaPKykpJ0i233KLz58/r4MGD+tKXvmTVMc6j9+Mf/1hHjhzR0aNHddNNN+nMmTOqqKhQMBjUunXrrDrGOvmSMaZD1Sdj3LnEI2natGnKzMwclPaam5sHpUtc2aZNm/T444/r6aef1owZM6z2QCAgSR84zoFAQJFIRC0tLcPWTHR1dXVqbm5WWVmZvF6vvF6vamtr9f3vf19er9caJ8Z5dK655hp99KMfjWm78cYbdeHCBUn87zmZ/u7v/k5f//rX9YUvfEGzZs3S2rVr9bWvfU1VVVWSGOtUSNaYBgIBvf3224OO/8c//nHU405AkZSdna2ysjLV1NTEtNfU1GjevHkO9WrsMcZo48aNeuyxx/TUU0+puLg4ZntxcbECgUDMOEciEdXW1lrjXFZWpqysrJiaxsZGnTt3jn+LPgsXLtTZs2d15swZ6zVnzhytWbNGZ86c0fXXX884J8EnP/nJQbfJv/rqq5o5c6Yk/vecTJcvX1ZGRuyfo8zMTOs2Y8Y6+ZI1prfddptCoZBeeOEFq+b5559XKBQa/biPaontONJ/m/GhQ4fMK6+8YioqKkxubq554403nO7amPHVr37V+P1+84tf/MI0NjZar8uXL1s1u3fvNn6/3zz22GPm7Nmz5p577hnytrYZM2aYEydOmJdeesl85jOfmdC3Co5E9F08xjDOyfDCCy8Yr9drvvvd75rXXnvN/PCHPzSTJ082R44csWoY5+RYt26dufbaa63bjB977DEzbdo0s337dquGsY5fW1ubefnll83LL79sJJm9e/eal19+2Xp8RrLG9LOf/ayZPXu2efbZZ82zzz5rZs2axW3GyfYv//IvZubMmSY7O9t8/OMft26PxchIGvL18MMPWzU9PT3mm9/8pgkEAsbn85k77rjDnD17NuY4HR0dZuPGjaagoMDk5OSY5cuXmwsXLqT5bMYWe0BhnJPjP//zP01paanx+XzmhhtuMA8++GDMdsY5OVpbW83mzZvNddddZyZNmmSuv/56s3PnThMOh60axjp+Tz/99JD/P3ndunXGmOSN6aVLl8yaNWtMXl6eycvLM2vWrDEtLS2j7r/HGGNGNwcDAACQXKxBAQAArkNAAQAArkNAAQAArkNAAQAArkNAAQAArkNAAQAArkNAAQAArkNAAQAArkNAAQAArkNAAQAArkNAAQAArkNAAQAArvP/Afy1ii+obUqGAAAAAElFTkSuQmCC",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(np.arange(0,epochs), loss);\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 278,
   "id": "3daa407b-d737-4857-a9b6-5b8079df0e7d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(np.arange(0,epochs), accuracy_array);"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "5a6a7650-914d-4d83-8685-458c99422b2d",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.2"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
